[["index.html", "R Plot Archive Introduction 0.1 Useful resources", " R Plot Archive Dean Li 2023-02-06 Introduction This is a simple book about how to create basic plot in R language and also have some modification of the basic plot for better visualization. Motivation: To better organized the code for plot Easy access with website To practice the bookdown 0.1 Useful resources https://r4ds.had.co.nz/data-visualisation.html https://r-graph-gallery.com/index.html https://www.data-to-viz.com/ https://exts.ggplot2.tidyverse.org/gallery/ "],["basic.html", "1 Basic 1.1 Prerequisites 1.2 Creating a ggplot 1.3 Aesthetic mappings 1.4 Facets 1.5 Geometric objects 1.6 Statistical transformation 1.7 Position adjustment 1.8 Coordinate systems 1.9 Summary", " 1 Basic In this book, we mainly focus on ggplot2 for generating plots. Here, we briefly introduce the basic grammar of ggplot2. This chapter is mainly adapted from the book R for Data Science (https://r4ds.had.co.nz/data-visualisation.html). 1.1 Prerequisites Install the ggplot2 and tidyverse package patchwork is a very useful package for combining multiple plots install.packages(&quot;ggplot2&quot;) install.packages(&quot;tidyverse&quot;) install.packages(&quot;patchwork&quot;) Load the packages. We use the mpg dataset for illustration. library(ggplot2) library(tidyverse) library(patchwork) data(&quot;mpg&quot;) mpg ## # A tibble: 234 × 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… ## 8 audi a4 quattro 1.8 1999 4 manu… 4 18 26 p comp… ## 9 audi a4 quattro 1.8 1999 4 auto… 4 16 25 p comp… ## 10 audi a4 quattro 2 2008 4 manu… 4 20 28 p comp… ## # … with 224 more rows 1.2 Creating a ggplot We use scatter plot (geom_point) to plot displ on x-axis and hwy on y-axis: # scatter plot # hwy：highway miles per gallon # displ：engine displacement, in litres ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) In ggplot2, we use the data argument to specify the dataset that we want to plot, and assign variables inside aes() function, such as mapping = aes(x = displ, y = hwy) . To create different plot, we use the geom_* function, such as scatter plot (geom_point) and barplot (geom_bar). We will go thorough the basic plot types in following chapters. 1.3 Aesthetic mappings Beside plotting the data, we can assign additional features to point, such as color, size and shape. In ggplot, those properties are called as aesthetic. For example, you can map the colors of your points to the class variable to reveal the class of each car. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class)) Or size of the point ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, size = class)) ## Warning: Using size for a discrete variable is not advised. You can also modify the color of the geom, this will override the color assign in aes. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class), color = &quot;blue&quot;) Common aesthetic arguments include: color/colour and fill: for mapping the colors. To be noted, scatter plot only accept color/colour for mapping colors. shape: for mapping the shape of the point. alpha: for mapping the transparency. size: for mapping the size. 1.4 Facets To split the plot into subplots that each display one subset of the data, is facets. You can use either facet_wrap() or facet_grid() for facet. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2) or the combination of two variables ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ cyl) 1.5 Geometric objects We can also combine different geom in one plot ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; # equivalent with the following codes: # ggplot(data = mpg) + # geom_point(mapping = aes(x = displ, y = hwy)) + # geom_smooth(mapping = aes(x = displ, y = hwy)) we can specify different aesthetic and different data in each geom ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(mapping = aes(color = class)) + geom_smooth(data = filter(mpg, class == &quot;subcompact&quot;), se = FALSE) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 1.6 Statistical transformation Next, we use diamonds dataset for illustration. data(&quot;diamonds&quot;) diamonds ## # A tibble: 53,940 × 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.29 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 ## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 ## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47 ## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53 ## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49 ## 10 0.23 Very Good H VS1 59.4 61 338 4 4.05 2.39 ## # … with 53,930 more rows ggplot2 contains lots of useful statistical transformation for visualization. For example, if we want to count the number of diamonds grouped by cut, we can simply use barplot to do this job. table(diamonds$cut) ## ## Fair Good Very Good Premium Ideal ## 1610 4906 12082 13791 21551 ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut), stat = &quot;count&quot;) # equals to: # ggplot(data = diamonds) + # stat_count(mapping = aes(x = cut)) In count mode, geom_bar can group the variables by x and count the frequency of each member. Also, you may be interested with other statistics ggplot(data = diamonds) + stat_summary( mapping = aes(x = cut, y = depth), fun.min = min, fun.max = max, fun = median ) 1.7 Position adjustment The color of barplot can be assigned with color and fill p1 &lt;- ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, colour = cut)) p2 &lt;- ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = cut)) # patchwork for combining plots p1 + p2 Beside, color can be grouping variable for displaying different property. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position=&#39;identity&#39;) Each layer of the barplot represents the number of diamonds with different clarity. position have three options: \"identity\", \"dodge\" or \"fill\". position = \"fill\" Show the proportions of each group ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = &quot;fill&quot;) position = \"dodge\" Place overlapping objects beside one another ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = &quot;dodge&quot;) 1.8 Coordinate systems 1.8.1 coord_flip() coord_flip() switches the x and y axes. p1 &lt;- ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot() p2 &lt;- ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot() + coord_flip() p1 + p2 1.8.2 coord_polar() coord_polar() uses polar coordinates. ggplot(data = diamonds) + geom_bar( mapping = aes(x = cut, fill = cut), show.legend = FALSE, width = 1 ) + theme(aspect.ratio = 1) + labs(x = NULL, y = NULL) + coord_polar() 1.9 Summary In all, ggplot2 can be summarized as the following code template: ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;( mapping = aes(&lt;MAPPINGS&gt;), stat = &lt;STAT&gt;, position = &lt;POSITION&gt; ) + &lt;COORDINATE_FUNCTION&gt; + &lt;FACET_FUNCTION&gt; "],["scatter.html", "2 Scatter 2.1 basic scatter 2.2 With color 2.3 With selected text label", " 2 Scatter In this chapter, we introduce the scatter plot in ggplot2 style. 2.1 basic scatter We use the iris dataset for illustration. library(ggplot2) data(iris) head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa basic scatter plot ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point() 2.2 With color ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point(aes(color=Species)) 2.2.1 Change color you can manually change the color with scale_color_manual, noted the number of color should equals to the number of groups (3 in this case). ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point(aes(color=Species)) + scale_color_manual(values=c(&quot;black&quot;, &quot;blue&quot;, &quot;red&quot;)) 2.3 With selected text label We can label selected points, such as those setosa with sepal length &gt; 5.5 iris$Mark &lt;- ifelse(iris$Species == &quot;setosa&quot; &amp; iris$Sepal.Length &gt; 5.5, &quot;M&quot;, &quot;&quot;) ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point(aes(color=Species)) + geom_text(aes(label=Mark)) "],["barplot.html", "3 Barplot 3.1 basic barplot 3.2 With color 3.3 Horizontal barplot 3.4 Circular barplot", " 3 Barplot In this chapter, we introduce the barplot in ggplot2 style. 3.1 basic barplot We use diamonds dataset for illustration. library(ggplot2) library(dplyr) library(patchwork) data(&quot;diamonds&quot;) diamonds ## # A tibble: 53,940 × 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.29 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 ## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 ## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47 ## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53 ## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49 ## 10 0.23 Very Good H VS1 59.4 61 338 4 4.05 2.39 ## # … with 53,930 more rows Count the number of diamonds in each cut group. df1 &lt;- diamonds %&gt;% count(cut) df1 ## # A tibble: 5 × 2 ## cut n ## &lt;ord&gt; &lt;int&gt; ## 1 Fair 1610 ## 2 Good 4906 ## 3 Very Good 12082 ## 4 Premium 13791 ## 5 Ideal 21551 We use stat=\"identity\" mode to generate barplot ggplot(df1, aes(x=cut, y=n)) + geom_bar(stat=&quot;identity&quot;) 3.2 With color ggplot(df1, aes(x=cut, y=n)) + geom_bar(aes(fill=cut), stat=&quot;identity&quot;) Using fill as grouping variable df2 &lt;- diamonds %&gt;% count(cut, clarity) df2 ## # A tibble: 40 × 3 ## cut clarity n ## &lt;ord&gt; &lt;ord&gt; &lt;int&gt; ## 1 Fair I1 210 ## 2 Fair SI2 466 ## 3 Fair SI1 408 ## 4 Fair VS2 261 ## 5 Fair VS1 170 ## 6 Fair VVS2 69 ## 7 Fair VVS1 17 ## 8 Fair IF 9 ## 9 Good I1 96 ## 10 Good SI2 1081 ## # … with 30 more rows ggplot(df2, aes(x=cut, y=n)) + geom_bar(aes(fill=clarity), stat=&quot;identity&quot;, position=&quot;identity&quot;) 3.2.1 adjust position There are two other more position options: “fill” and “dodge” p1 &lt;- ggplot(df2, aes(x=cut, y=n)) + geom_bar(aes(fill=clarity), stat=&quot;identity&quot;, position=&quot;fill&quot;) p2 &lt;- ggplot(df2, aes(x=cut, y=n)) + geom_bar(aes(fill=clarity), stat=&quot;identity&quot;, position=&quot;dodge&quot;) p1 + p2 3.3 Horizontal barplot ggplot(df1, aes(x=cut, y=n)) + geom_bar(aes(fill=cut), stat=&quot;identity&quot;) + coord_flip() 3.4 Circular barplot ggplot(df1, aes(x=cut, y=n)) + geom_bar(aes(fill=cut), stat=&quot;identity&quot;, width=1) + theme(aspect.ratio = 1) + labs(x = NULL, y = NULL) + coord_polar() "],["histogram.html", "4 Histogram 4.1 basic 4.2 control the bin size 4.3 With color", " 4 Histogram In this chapter, we introduce the histogram in ggplot2 style. 4.1 basic We use diamonds dataset for illustration. library(ggplot2) library(dplyr) library(patchwork) data(&quot;diamonds&quot;) diamonds ## # A tibble: 53,940 × 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.29 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 ## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 ## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47 ## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53 ## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49 ## 10 0.23 Very Good H VS1 59.4 61 338 4 4.05 2.39 ## # … with 53,930 more rows Histogram can be used to show the distribution of data ggplot(diamonds, aes(x=price)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 4.2 control the bin size The bin size of histogram control the interval of data, which can be adjusted by changing the number of binwidth or bins in geom_histogram Detail in https://www.data-to-viz.com/caveat/bin_size.html p1 &lt;- ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth = 10) + labs(title = &quot;binwidth=10&quot;) p2 &lt;- ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth = 100) + labs(title = &quot;binwidth=100&quot;) p3 &lt;- ggplot(diamonds, aes(x=price)) + geom_histogram(binwidth = 1000) + labs(title = &quot;binwidth=1000&quot;) p1 + p2 + p3 + plot_layout(nrow=1) &amp; theme_classic() 4.3 With color ggplot(diamonds, aes(x=price)) + geom_histogram(bins = 50, fill=&quot;#507991&quot;) + theme_classic() "],["density.html", "5 Density 5.1 basic 5.2 With color 5.3 Adding histogram", " 5 Density In this chapter, we introduce the density plot in ggplot2 style. 5.1 basic We use diamonds dataset for illustration. library(ggplot2) library(dplyr) library(patchwork) data(&quot;diamonds&quot;) diamonds ## # A tibble: 53,940 × 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.29 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 ## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 ## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47 ## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53 ## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49 ## 10 0.23 Very Good H VS1 59.4 61 338 4 4.05 2.39 ## # … with 53,930 more rows Density plot can be used to show the distribution of data ggplot(diamonds, aes(x=price)) + geom_density(fill=&quot;#507991&quot;) + theme_classic() 5.2 With color use fill as grouping variable ggplot(diamonds, aes(x=price)) + geom_density(aes(fill=cut), alpha=0.6) + theme_classic() 5.3 Adding histogram ggplot(diamonds, aes(x=price)) + geom_histogram(aes(y = ..density..), color=1, fill=&quot;white&quot;) + geom_density(fill=&quot;#507991&quot;, alpha=0.5, color=NA, lwd=1) + theme_classic() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. "],["boxplot.html", "6 Boxplot 6.1 basic 6.2 With color or fill", " 6 Boxplot In this chapter, we introduce the boxplot in ggplot2 style. 6.1 basic We use iris dataset for illustration. library(ggplot2) library(dplyr) library(patchwork) data(&quot;iris&quot;) head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_boxplot() 6.2 With color or fill p1 &lt;- ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_boxplot(aes(fill=Species)) p2 &lt;- ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_boxplot(aes(color=Species)) p1 + p2 "],["vilion.html", "7 Vilion 7.1 basic 7.2 With color or fill", " 7 Vilion In this chapter, we introduce the vilionplot in ggplot2 style. 7.1 basic We use iris dataset for illustration. library(ggplot2) library(dplyr) library(patchwork) data(&quot;iris&quot;) head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_violin() 7.2 With color or fill p1 &lt;- ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_violin(aes(fill=Species)) p2 &lt;- ggplot(iris, aes(x=Species, y=Sepal.Length)) + geom_violin(aes(color=Species)) p1 + p2 "],["heatmap.html", "8 Heatmap 8.1 ggplot2 8.2 pheatmap 8.3 ComplexHeatmap", " 8 Heatmap In this chapter, we introduce the heatmap in ggplot2, pheatmap and ComplexHeatmap styles. Install related packages install.packages(c(&quot;ggplot2&quot;,&quot;pheatmap&quot;,&quot;ComplexHeatmap&quot;)) Load packages and create dummy data library(ggplot2) library(pheatmap) library(ComplexHeatmap) library(paintingr) # for generation of color palettes # Dummy data x &lt;- LETTERS[1:20] y &lt;- paste0(&quot;var&quot;, seq(1,20)) dum.data &lt;- expand.grid(X=x, Y=y) dum.data$Z &lt;- seq(1,20)+runif(400, 0, 5) head(dum.data) ## X Y Z ## 1 A var1 5.449923 ## 2 B var1 5.902715 ## 3 C var1 7.513017 ## 4 D var1 5.348068 ## 5 E var1 8.868486 ## 6 F var1 9.888554 8.1 ggplot2 Basic heatmap in ggplot2 style (geom_tile) # Heatmap pal &lt;- paint_palette(&quot;Autumn&quot;, n=100, type=&quot;continuous&quot;) ggplot(dum.data, aes(X, Y, fill= Z)) + geom_tile() + scale_fill_gradientn(colours = pal) + scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + coord_equal() 8.2 pheatmap Both pheatmap and ComplexHeatmap require matrix like input # Dummy data set.seed(123) dum.mat &lt;- matrix(rnorm(1000), ncol=10) head(dum.mat) ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] -0.56047565 -0.71040656 2.1988103 -0.7152422 -0.07355602 -0.60189285 ## [2,] -0.23017749 0.25688371 1.3124130 -0.7526890 -1.16865142 -0.99369859 ## [3,] 1.55870831 -0.24669188 -0.2651451 -0.9385387 -0.63474826 1.02678506 ## [4,] 0.07050839 -0.34754260 0.5431941 -1.0525133 -0.02884155 0.75106130 ## [5,] 0.12928774 -0.95161857 -0.4143399 -0.4371595 0.67069597 -1.50916654 ## [6,] 1.71506499 -0.04502772 -0.4762469 0.3311792 -1.65054654 -0.09514745 ## [,7] [,8] [,9] [,10] ## [1,] 1.07401226 -0.7282191 0.3562833 -1.0141142 ## [2,] -0.02734697 -1.5404424 -0.6580102 -0.7913139 ## [3,] -0.03333034 -0.6930946 0.8552022 0.2995937 ## [4,] -1.51606762 0.1188494 1.1529362 1.6390519 ## [5,] 0.79038534 -1.3647095 0.2762746 1.0846170 ## [6,] -0.21073418 0.5899827 0.1441047 -0.6245675 Create basic pheatmap pheatmap::pheatmap(dum.mat) 8.2.1 Control color pal2 &lt;- paint_palette(&quot;Twilight&quot;, 100, &quot;continuous&quot;) pheatmap::pheatmap(dum.mat, color = pal2, border_color = NA) 8.3 ComplexHeatmap Create basic ComplexHeatmap ComplexHeatmap::Heatmap(dum.mat, name=&quot;mat&quot;) 8.3.1 Control color Pass vector of colors to change the color ComplexHeatmap::Heatmap(dum.mat, name=&quot;mat&quot;, col=paint_palette(&quot;Vesuvius&quot;)) Color of ComplexHeatmap can also be modified with a color mapping function. # generate color mapping function col_fun &lt;- circlize::colorRamp2(breaks = seq(-3,3), colors = paint_palette(&quot;Twilight&quot;,7,&quot;continuous&quot;)) ComplexHeatmap::Heatmap(dum.mat, name=&quot;mat&quot;, col=col_fun, heatmap_legend_param = list(at = c(-3,-1.5,0,1.5,3)) # control breaks of heatmap legend ) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
